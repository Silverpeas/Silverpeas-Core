/*
 * Copyright (C) 2000 - 2016 Silverpeas
 *
 * This program is free software: you can redistribute it and/or modify it under the terms of the
 * GNU Affero General Public License as published by the Free Software Foundation, either version 3
 * of the License, or (at your option) any later version.
 *
 * As a special exception to the terms and conditions of version 3.0 of the GPL, you may
 * redistribute this Program in connection with Free/Libre Open Source Software ("FLOSS")
 * applications as described in Silverpeas's FLOSS exception. You should have received a copy of the
 * text describing the FLOSS exception, and it is also available here:
 * "http://www.silverpeas.org/docs/core/legal/floss_exception.html"
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without
 * even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
 * Affero General Public License for more details.
 *
 * You should have received a copy of the GNU Affero General Public License along with this program.
 * If not, see <http://www.gnu.org/licenses/>.
 */
package org.silverpeas.web.socialnetwork.authentication;

import org.silverpeas.core.admin.user.UserRegistrationService;
import org.silverpeas.core.socialnetwork.connectors.SocialNetworkConnector;
import org.silverpeas.core.socialnetwork.model.ExternalAccount;
import org.silverpeas.core.socialnetwork.model.SocialNetworkID;
import org.silverpeas.core.socialnetwork.service.AccessToken;
import org.silverpeas.core.socialnetwork.service.SocialNetworkAuthorizationException;
import org.silverpeas.core.socialnetwork.service.SocialNetworkService;
import org.silverpeas.core.util.URLUtil;
import org.silverpeas.core.silvertrace.SilverTrace;
import org.silverpeas.core.admin.service.AdminException;
import java.io.IOException;
import javax.inject.Inject;
import javax.servlet.RequestDispatcher;
import javax.servlet.ServletException;
import javax.servlet.http.HttpServlet;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import org.silverpeas.core.security.authentication.exception.AuthenticationException;
import org.silverpeas.core.security.authentication.verifier.AuthenticationUserVerifierFactory;
import org.silverpeas.core.security.authentication.verifier.UserCanLoginVerifier;
import org.silverpeas.core.web.authentication.credentials.RegistrationSettings;
import org.springframework.social.connect.UserProfile;

/**
 * Controller to log remote social network users into Silverpeas
 *
 * @author Ludovic BERTIN
 */
public class SocialNetworkLoginController extends HttpServlet {

  private static final long serialVersionUID = 3019716885114707069L;

  @Inject
  private UserRegistrationService userRegistrationService;
  private RegistrationSettings registrationSettings = null;

  @Override
  protected void doGet(HttpServletRequest req, HttpServletResponse resp)
      throws ServletException, IOException {
    processLogin(req, resp);
  }

  @Override
  protected void doPost(HttpServletRequest req, HttpServletResponse resp)
      throws ServletException, IOException {
    processLogin(req, resp);
  }

  @Override
  public void init() throws ServletException {
    super.init();
    registrationSettings = RegistrationSettings.getSettings();
  }

  /**
   * Process Handshake to openSession user in remote social network and then log user in Silverpeas.
   * If no account has been created yet, it is automatically generated by get user's remote social
   * network profile info.
   *
   * @param req HTTP request
   * @param resp HTTP response
   * @throws IOException
   * @throws ServletException
   */
  private void processLogin(HttpServletRequest req, HttpServletResponse resp) throws IOException,
      ServletException {
    String command = req.getParameter("command");

    // First step, isUserStateValid Linked authentication
    if (command == null) {
      SocialNetworkID networkId = SocialNetworkID.valueOf(req.getParameter("networkId"));
      String authenticateURL = getAuthenticateURL(networkId, req);
      resp.sendRedirect(authenticateURL);
    } // Then
    else if ("backFromSocialNetworkAuthentication".equals(command)) {
      SocialNetworkID networkId = SocialNetworkID.valueOf(req.getParameter("networkId"));
      SocialNetworkConnector connector = getSocialNetworkConnector(networkId);

      AccessToken authorizationToken;
      try {
        authorizationToken = connector.exchangeForAccessToken(req, getRedirectURL(networkId, req));
      } catch (SocialNetworkAuthorizationException e) {
        resp.sendRedirect("/Login.jsp");
        return;
      }

      // Try to retrieve a silverpeas account linked to remote social network account
      String profileId = connector.getUserProfileId(authorizationToken);
      ExternalAccount account = SocialNetworkService.getInstance().getExternalAccount(networkId,
          profileId);

      // Verify that the user can login
      if (account != null) {
        UserCanLoginVerifier userStateVerifier = AuthenticationUserVerifierFactory
            .getUserCanLoginVerifier(account.getSilverpeasUserId());
        try {
          userStateVerifier.verify();
        } catch (AuthenticationException e) {
          SocialNetworkService.getInstance().removeAuthorizationToken(req.getSession(false));
          resp.sendRedirect(URLUtil.getFullApplicationURL(req) + userStateVerifier
              .getErrorDestination());
          return;
        }
      }

      SocialNetworkService.getInstance()
          .storeAuthorizationToken(req.getSession(true), networkId, authorizationToken);

      // no Silverpeas account yet
      if (account == null) {

        // if new registration is enabled on platform, redirects user to registration
        if (registrationSettings.isUserSelfRegistrationEnabled()) {
          UserProfile profile = connector.getUserProfile(authorizationToken);
          req.setAttribute("userProfile", profile);
          req.setAttribute("networkId", networkId);
          req.getRequestDispatcher("/admin/jsp/registerFromRemoteSocialNetwork.jsp").forward(req,
              resp);
        } // new registration is disabled : redirect user to Login
        else {
          SocialNetworkService.getInstance().removeAuthorizationToken(req.getSession(false));
          resp.sendRedirect(URLUtil.getFullApplicationURL(req) + "/Login.jsp?ErrorCode=5");
        }
      } // Silverpeas account found, log user
      else {
        RequestDispatcher dispatcher = req.getRequestDispatcher("/AuthenticationServlet");
        dispatcher.forward(req, resp);
      }
    } // Silverpeas registration
    else if ("register".equals(command)) {
      SocialNetworkID networkId = SocialNetworkID.valueOf(req.getParameter("networkId"));
      SocialNetworkConnector socialNetworkConnector = getSocialNetworkConnector(networkId);

      String firstName = req.getParameter("firstName");
      String lastName = req.getParameter("lastName");
      String email = req.getParameter("email");
      String domainId = registrationSettings.userSelfRegistrationDomainId();

      try {
        String userId = userRegistrationService.registerUser(firstName, lastName, email, domainId);
        AccessToken authorizationToken = SocialNetworkService.getInstance().
            getStoredAuthorizationToken(req.getSession(true),
                networkId);
        String profileId = socialNetworkConnector.getUserProfileId(authorizationToken);
        SocialNetworkService.getInstance().createExternalAccount(networkId, userId, profileId);
      } catch (AdminException e) {
        SilverTrace.error("socialNetwork", "SocialNetworkLoginController.register",
            "socialNetwork.EX_CANT_REGISTER_USER");
        RequestDispatcher dispatcher = req.getRequestDispatcher("/admin/jsp/alreadyRegistered.jsp");
        dispatcher.forward(req, resp);
        return;
      }

      // Forward to authentication servlet
      RequestDispatcher dispatcher = req.getRequestDispatcher("/AuthenticationServlet");
      dispatcher.forward(req, resp);
    }

  }

  private String getRedirectURL(SocialNetworkID networkId, HttpServletRequest request) {
    StringBuilder redirectURL = new StringBuilder();
    redirectURL.append(URLUtil.getFullApplicationURL(request));
    redirectURL.append("/SocialNetworkLogin?command=backFromSocialNetworkAuthentication&networkId=");
    redirectURL.append(networkId);
    return redirectURL.toString();
  }

  private SocialNetworkConnector getSocialNetworkConnector(SocialNetworkID networkId) {
    return SocialNetworkService.getInstance().getSocialNetworkConnector(networkId);
  }

  /**
   * Get URL to invoke remote social network authentication
   *
   * @return
   */
  private String getAuthenticateURL(SocialNetworkID networkId, HttpServletRequest request) {
    return getSocialNetworkConnector(networkId).buildAuthenticateUrl(getRedirectURL(networkId,
        request));
  }
}
