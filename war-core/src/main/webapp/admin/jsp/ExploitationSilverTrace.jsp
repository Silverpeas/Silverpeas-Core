<%--

    Copyright (C) 2000 - 2012 Silverpeas

    This program is free software: you can redistribute it and/or modify
    it under the terms of the GNU Affero General Public License as
    published by the Free Software Foundation, either version 3 of the
    License, or (at your option) any later version.

    As a special exception to the terms and conditions of version 3.0 of
    the GPL, you may redistribute this Program in connection with Free/Libre
    Open Source Software ("FLOSS") applications as described in Silverpeas's
    FLOSS exception.  You should have received a copy of the text describing
    the FLOSS exception, and it is also available here:
    "http://www.silverpeas.org/docs/core/legal/floss_exception.html"

    This program is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU Affero General Public License for more details.

    You should have received a copy of the GNU Affero General Public License
    along with this program.  If not, see <http://www.gnu.org/licenses/>.

--%>

<%@page contentType="text/html; charset=UTF-8" pageEncoding="UTF-8"%>

<%
response.setHeader("Cache-Control","no-store"); //HTTP 1.1
response.setHeader("Pragma","no-cache"); //HTTP 1.0
response.setDateHeader ("Expires",-1); //prevents caching at the proxy server
%>
<%@ page import="java.util.*"%>
<%@ page import="com.stratelia.webactiv.beans.admin.AdminController"%>
<%@ page import="com.stratelia.webactiv.beans.admin.UserLog"%>
<%@ page import="com.stratelia.webactiv.beans.admin.UserDetail"%>

<%@ page import="com.stratelia.silverpeas.peasCore.MainSessionController"%>
<%@ page import="com.stratelia.silverpeas.silvertrace.*"%>
<%@ page import="com.stratelia.webactiv.util.ResourceLocator"%>

<%!
private AdminController m_AdminCtrl = null;
private static java.text.SimpleDateFormat m_Formatter = new java.text.SimpleDateFormat("dd/MM/yyyy HH:mm:ss:S");

String addAppenderInList(String module, int appType, int currentType)
{
	Properties	appProps;
	String		valret = "";
	String		selectedString = "";

	appProps = SilverTrace.getAppender(module,appType);
	if (appProps != null)
	{
		if (currentType == appType)
			selectedString = " selected=\"selected\"";
		valret = "<option value=\"" + Integer.toString(appType) + "\""+ selectedString + ">" + appProps.getProperty("Name") + "</option>";
	}
	return valret;
}
%>

<%
MainSessionController mainSessionController = (MainSessionController) session.getAttribute(MainSessionController.MAIN_SESSION_CONTROLLER_ATT);
if (mainSessionController == null || !UserDetail.ADMIN_ACCESS.equals(mainSessionController.getUserAccessLevel()))
{
%>
	<script type="text/javascript"> 
		top.location="../../Login.jsp";
	</script>
<%
}


String m_sContext = "";
String m_sAction = "";
String sURI = request.getRequestURI();
String sServletPath = request.getServletPath();
String sPathInfo = request.getPathInfo();
String sCurrentModule = "root";

int appenderSelected = 0;
int appenderType = SilverTrace.APPENDER_CONSOLE;
String appenderLayout = SilverTraceLayout.LAYOUT_DETAILED.name();
String appenderFile = "";
boolean appenderFileAppend = true;
String appenderRollingType = "";
String appenderConsole = "";
String appenderMailHost = "";
String appenderMailFrom = "";
String appenderMailTo = "";
String appenderMailSubject = "";

boolean haveToSetAppenderValues = true;

if(sPathInfo != null)
    sURI = sURI.substring(0,sURI.lastIndexOf(sPathInfo));

m_sContext = sURI.substring(0,sURI.lastIndexOf(sServletPath));
if(m_sContext.charAt(m_sContext.length()-1) == '/')
    m_sContext = m_sContext.substring(0, m_sContext.length()-1);

m_AdminCtrl = new AdminController(null);
UserLog[] m_aUserConnections = m_AdminCtrl.getUserConnected();

m_sAction = request.getParameter("Action");

if (m_sAction != null)
{
	if (m_sAction.equals("resetAllFromProperties"))
	{
		SilverTrace.resetAll();
		m_sAction = null; // Reset all values -> act like there was the first display of this page
	}
	else if (m_sAction.equals("applyProperties"))
	{
		SilverTrace.applyProperties(request.getParameter("ApplyPropertiesFile"));
		m_sAction = null; // Reset all values -> act like there was the first display of this page
	}
}

if (m_sAction != null)
{
	sCurrentModule = request.getParameter("Modules");
	if (request.getParameter("Appenders") != null)
		appenderSelected = Integer.parseInt(request.getParameter("Appenders"));
	appenderLayout = request.getParameter("Layout");
	appenderType = Integer.parseInt(request.getParameter("AppenderType"));

	if (request.getParameter("consoleName") != null)
		appenderConsole = request.getParameter("consoleName");
	if (request.getParameter("fileName") != null)
		appenderFile = request.getParameter("fileName");
	if (request.getParameter("append") != null)
		appenderFileAppend = true;
	else
		appenderFileAppend = false;
	if (request.getParameter("rollingMode") != null)
		appenderRollingType = request.getParameter("rollingMode");
	if (request.getParameter("mailHost") != null)
		appenderMailHost = request.getParameter("mailHost");
	if (request.getParameter("mailFrom") != null)
		appenderMailFrom = request.getParameter("mailFrom");
	if (request.getParameter("mailTo") != null)
		appenderMailTo = request.getParameter("mailTo");
	if (request.getParameter("mailSubject") != null)
		appenderMailSubject = request.getParameter("mailSubject");

	if (m_sAction.equals("changeTraceLevel"))
		SilverTrace.setTraceLevel(sCurrentModule,Integer.parseInt(request.getParameter("LvlTrace")));

	if (m_sAction.equals("addNewAppender"))
	{
		switch (appenderType)
		{
			case SilverTrace.APPENDER_CONSOLE :
				SilverTrace.addAppenderConsole(sCurrentModule, appenderLayout, appenderConsole);
				break;
			case SilverTrace.APPENDER_FILE :
				SilverTrace.addAppenderFile(sCurrentModule, appenderLayout, appenderFile, appenderFileAppend);
				break;
			case SilverTrace.APPENDER_ROLLING_FILE :
				SilverTrace.addAppenderRollingFile(sCurrentModule, appenderLayout, appenderFile, appenderRollingType);
				break;
			case SilverTrace.APPENDER_MAIL :
				SilverTrace.addAppenderMail(sCurrentModule, appenderLayout, appenderMailHost, appenderMailFrom, appenderMailTo, appenderMailSubject);
				break;
		}
		appenderSelected = appenderType;
	}
	if (m_sAction.equals("removeAppender"))
	{
		SilverTrace.removeAppender(sCurrentModule,appenderSelected);
		appenderSelected = 0;
	}
	if ((m_sAction.equals("removeAppender") == false) && (m_sAction.equals("addNewAppender") == false) && (m_sAction.equals("changeAppender") == false) && (m_sAction.equals("changeModule") == false))
	{
		haveToSetAppenderValues = false;
	}
	if (m_sAction.equals("resetDBConnections"))
	{
			m_AdminCtrl.resetAllDBConnections(false);
	}
	if (m_sAction.equals("resetResourceLocator"))
	{
		ResourceLocator.resetResourceLocator();
	}
}

if (haveToSetAppenderValues)
{
	Properties	appProps;
	int			appAvailable;

	appAvailable = SilverTrace.getAvailableAppenders(sCurrentModule);
	if ((appenderSelected == 0) || ((appenderSelected & appAvailable) != appenderSelected))
	{	// appender type no longer value, select another if possible...
		if ((SilverTrace.APPENDER_CONSOLE & appAvailable) == SilverTrace.APPENDER_CONSOLE)
			appenderSelected = SilverTrace.APPENDER_CONSOLE;
		else if ((SilverTrace.APPENDER_FILE & appAvailable) == SilverTrace.APPENDER_FILE)
			appenderSelected = SilverTrace.APPENDER_FILE;
		else if ((SilverTrace.APPENDER_ROLLING_FILE & appAvailable) == SilverTrace.APPENDER_ROLLING_FILE)
			appenderSelected = SilverTrace.APPENDER_ROLLING_FILE;
		else if ((SilverTrace.APPENDER_MAIL & appAvailable) == SilverTrace.APPENDER_MAIL)
			appenderSelected = SilverTrace.APPENDER_MAIL;
		else
			appenderSelected = 0;
	}
	if (appenderSelected != 0)
	{
		appenderType = appenderSelected;
		appProps = SilverTrace.getAppender(sCurrentModule,appenderType);
		appenderLayout = appProps.getProperty("Layout",appenderLayout);
		switch (appenderType)
		{
			case SilverTrace.APPENDER_CONSOLE :
				appenderConsole = appProps.getProperty("consoleName",appenderConsole);
				break;
			case SilverTrace.APPENDER_FILE :
				appenderFile = appProps.getProperty("fileName",appenderFile);
				if (appProps.getProperty("append","true").equals("true"))
					appenderFileAppend = true;
				else
					appenderFileAppend = false;
				break;
			case SilverTrace.APPENDER_ROLLING_FILE :
				appenderFile = appProps.getProperty("fileName",appenderFile);
				appenderRollingType = appProps.getProperty("rollingMode",appenderRollingType);
				break;
			case SilverTrace.APPENDER_MAIL :
				appenderMailHost = appProps.getProperty("mailHost",appenderMailHost);
				appenderMailFrom = appProps.getProperty("mailFrom",appenderMailFrom);
				appenderMailTo = appProps.getProperty("mailTo",appenderMailTo);
				appenderMailSubject = appProps.getProperty("mailSubject",appenderMailSubject);
				break;
		}
	}
}
%>

<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" 
   "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<title>Silver Trace Debug Page</title>
<link rel="stylesheet" type="text/css" href="<%=m_sContext%>/util/styleSheets/globalSP_SilverpeasV5.css"/>
<script type="text/javascript">
function applyProperties()
{
	document.ExploitationForm.Action.value = "applyProperties";
	document.ExploitationForm.submit();
}

function changeModule()
{
	document.ExploitationForm.Action.value = "changeModule";
	document.ExploitationForm.submit();
}
function changeTraceLevel()
{
	document.ExploitationForm.Action.value = "changeTraceLevel";
	document.ExploitationForm.submit();
}
function changeAppenderType()
{
	document.ExploitationForm.Action.value = "changeAppenderType";
	document.ExploitationForm.submit();
}
function changeAppender()
{
	document.ExploitationForm.Action.value = "changeAppender";
	document.ExploitationForm.submit();
}
function addNewAppender()
{
	document.ExploitationForm.Action.value = "addNewAppender";
	document.ExploitationForm.submit();
}
function removeAppender()
{
	document.ExploitationForm.Action.value = "removeAppender";
	document.ExploitationForm.submit();
}
function resetDBConnections()
{
	document.ExploitationForm.Action.value = "resetDBConnections";
	document.ExploitationForm.submit();
}
function resetResourceLocator()
{
	document.ExploitationForm.Action.value = "resetResourceLocator";
	document.ExploitationForm.submit();
}
function displayTraces()
{
    window.open("<%=m_sContext%>/admin/jsp/DisplaySilverTrace.jsp?NbLinesToDisplay=" + document.ExploitationForm.NbLinesToDisplay.value, "TheSilvertracePopup");
}
function resetAllFromProperties()
{
	if (window.confirm("!!!Warning!!! This will reset ALL trace configurations (appenders and debug levels)."))
	{
		document.ExploitationForm.Action.value = "resetAllFromProperties";
		document.ExploitationForm.submit();
	}
}

</script>
</head>
<body>
<center>
<h1 class="intfdcolor3">Exploitation</h1>
<h2 class="intfdcolor3">Log setting</h2>
 <form name="ExploitationForm" action="<%=m_sContext%>/admin/jsp/ExploitationSilverTrace.jsp" method="post">
  <br/><b>Number of lines to display from the end : </b><input size="10" type="text" name="NbLinesToDisplay" value="1000"/>&nbsp;&nbsp;<input type="button" value="Display Traces" onclick='javascript:displayTraces()'/><br/><br/>
  <input type="hidden" name="Action"/>
  <input type="hidden" name="Level"/>
  <table width="100%" border="0" cellspacing="0" cellpadding="5">
	<tr>
      <td width="250">
		<b>Modules : </b>
	  </td>
      <td width="250" nowrap="nowrap">
		<b>Module's trace settings : </b>
	  </td>
      <td width="100%" nowrap="nowrap">
		<b>Adding/Modifying appender : </b>
	  </td>
    </tr>
	<tr>
      <td width="250">
		<select size="20" name="Modules" onchange='javascript:changeModule()'>
<%
		Properties	traceModules = SilverTrace.getModuleList();
		Enumeration	traceEnumeration = traceModules.propertyNames();
		ArrayList	traceArrayList = new ArrayList();
		Iterator	traceModulesNames = null;
		String		traceModuleName = null;
		String		traceModulePath = null;
		String		traceModuleFull = null;

		while (traceEnumeration.hasMoreElements())
		{
			traceModuleName = traceEnumeration.nextElement().toString();
			traceModuleFull = traceModules.getProperty(traceModuleName) + "$$" + traceModuleName;
			traceArrayList.add(traceModuleFull);
		}
		Collections.sort(traceArrayList);
		traceModulesNames = traceArrayList.iterator();
		while (traceModulesNames.hasNext())
		{
			traceModuleFull = traceModulesNames.next().toString();
			traceModulePath = traceModuleFull.substring(0,traceModuleFull.lastIndexOf("$$"));
			traceModuleName = traceModuleFull.substring(traceModuleFull.lastIndexOf("$$")+2);
	        out.print("<option value=\"" + traceModuleName + "\"");
			if (sCurrentModule.compareToIgnoreCase(traceModuleName) == 0)
				out.print(" selected=\"selected\"");
			out.println(">");
            if (SilverTrace.getAvailableAppenders(traceModuleName) != 0)
    			out.println("A | ");
            else
    			out.println("_ | ");
			switch (SilverTrace.getTraceLevel(traceModuleName,true))
			{
				case SilverTrace.TRACE_LEVEL_DEBUG :
					out.println("D ");
					break;
				case SilverTrace.TRACE_LEVEL_INFO :
					out.println("I ");
					break;
				case SilverTrace.TRACE_LEVEL_WARN :
					out.println("W ");
					break;
				case SilverTrace.TRACE_LEVEL_ERROR :
					out.println("E ");
					break;
				case SilverTrace.TRACE_LEVEL_FATAL :
					out.println("F ");
					break;
			}
            if (SilverTrace.getTraceLevel(traceModuleName,false) == SilverTrace.TRACE_LEVEL_UNKNOWN)
                out.println("_ | ");
            else
                out.println("* | ");
			out.println(traceModulePath + "</option>");
		}
%>
		</select>
	  </td>
      <td valign="top">
		Trace Level :
		<select name="LvlTrace" onchange='javascript:changeTraceLevel()'>
			<option value="<%=Integer.toString(SilverTrace.TRACE_LEVEL_UNKNOWN)%>" <% if (SilverTrace.getTraceLevel(sCurrentModule,false) == SilverTrace.TRACE_LEVEL_UNKNOWN) out.println("selected=\"selected\""); %>>(Parent)</option>
			<option value="<%=Integer.toString(SilverTrace.TRACE_LEVEL_DEBUG)%>" <% if (SilverTrace.getTraceLevel(sCurrentModule,false) == SilverTrace.TRACE_LEVEL_DEBUG) out.println("selected=\"selected\""); %>>Debug</option>
			<option value="<%=Integer.toString(SilverTrace.TRACE_LEVEL_INFO)%>" <% if (SilverTrace.getTraceLevel(sCurrentModule,false) == SilverTrace.TRACE_LEVEL_INFO) out.println("selected=\"selected\""); %>>Info</option>
			<option value="<%=Integer.toString(SilverTrace.TRACE_LEVEL_WARN)%>" <% if (SilverTrace.getTraceLevel(sCurrentModule,false) == SilverTrace.TRACE_LEVEL_WARN) out.println("selected=\"selected\""); %>>Warning</option>
			<option value="<%=Integer.toString(SilverTrace.TRACE_LEVEL_ERROR)%>" <% if (SilverTrace.getTraceLevel(sCurrentModule,false) == SilverTrace.TRACE_LEVEL_ERROR) out.println("selected=\"selected\""); %>>Error</option>
			<option value="<%=Integer.toString(SilverTrace.TRACE_LEVEL_FATAL)%>" <% if (SilverTrace.getTraceLevel(sCurrentModule,false) == SilverTrace.TRACE_LEVEL_FATAL) out.println("selected=\"selected\""); %>>Fatal</option>
		</select>
		<br/><br/>
		Appenders : <br/>
		<select size="5" name="Appenders" onchange='javascript:changeAppender()'>
		<%
			out.println(addAppenderInList(sCurrentModule,SilverTrace.APPENDER_CONSOLE,appenderSelected));
			out.println(addAppenderInList(sCurrentModule,SilverTrace.APPENDER_FILE,appenderSelected));
			out.println(addAppenderInList(sCurrentModule,SilverTrace.APPENDER_ROLLING_FILE,appenderSelected));
			out.println(addAppenderInList(sCurrentModule,SilverTrace.APPENDER_MAIL,appenderSelected));
		%>
		</select>
		<br/><br/>
		<input type="button" value="Remove appender" onclick='javascript:removeAppender()'/><br/><br/><br/>
		<span class="titreModule">Properties file :</span><br/>
	    <input type="text" name="ApplyPropertiesFile" value=""/>
    	<input type="button" value="Apply" onclick="javascript:applyProperties()"/><br/><br/>
	    <input type="button" value="Reset ALL traces to default properties" onclick='javascript:resetAllFromProperties()'/><br/>
	  </td>
      <td valign="top">
		Type :
		<select name="AppenderType" onchange='javascript:changeAppenderType()'>
			<option value="<%=Integer.toString(SilverTrace.APPENDER_CONSOLE)%>" <% if (appenderType == SilverTrace.APPENDER_CONSOLE) out.println("selected=\"selected\""); %>>Console</option>
			<option value="<%=Integer.toString(SilverTrace.APPENDER_FILE)%>" <% if (appenderType == SilverTrace.APPENDER_FILE) out.println("selected=\"selected\""); %>>File</option>
			<option value="<%=Integer.toString(SilverTrace.APPENDER_ROLLING_FILE)%>" <% if (appenderType == SilverTrace.APPENDER_ROLLING_FILE) out.println("selected=\"selected\""); %>>Rolling File</option>
			<option value="<%=Integer.toString(SilverTrace.APPENDER_MAIL)%>" <% if (appenderType == SilverTrace.APPENDER_MAIL) out.println("selected=\"selected\""); %>>Mail</option>
		</select>
		<br/><br/>
		Layout :
		<select name="Layout">
			<option value="<%=SilverTraceLayout.LAYOUT_HTML.name()%>" <% if (SilverTraceLayout.LAYOUT_HTML.name().equals(appenderLayout)) out.println("selected=\"selected\""); %>>HTML Page</option>
			<option value="<%=SilverTraceLayout.LAYOUT_SHORT.name()%>" <% if (SilverTraceLayout.LAYOUT_SHORT.name().equals(appenderLayout)) out.println("selected=\"selected\""); %>>TEXT Short</option>
			<option value="<%=SilverTraceLayout.LAYOUT_DETAILED.name()%>" <% if (SilverTraceLayout.LAYOUT_DETAILED.name().equals(appenderLayout)) out.println("selected=\"selected\""); %>>TEXT Detailed</option>
			<option value="<%=SilverTraceLayout.LAYOUT_FULL_DEBUG.name()%>" <% if (SilverTraceLayout.LAYOUT_FULL_DEBUG.name().equals(appenderLayout)) out.println("selected=\"selected\""); %>>TEXT Full infos</option>
		</select>
		<br/><br/>
<%	if (appenderType == SilverTrace.APPENDER_CONSOLE) { %>
		Console : <br/><input type="text" name="consoleName" size="60" value="<%=appenderConsole%>"/><br/><br/>
<%	}%>
<%	if (appenderType == SilverTrace.APPENDER_FILE) { %>
		File : <br/><input type="text" name="fileName" size="60" value="<%=appenderFile%>"/><br/><input type="checkbox" <% if (appenderFileAppend) out.println("checked=\"checked\""); %> name="append" value="true"/>Append<br/><br/>
<%	}%>
<%	if (appenderType == SilverTrace.APPENDER_ROLLING_FILE) { %>
		File : <br/><input type="text" name="fileName" size="60" value="<%=appenderFile%>"/><br/><br/>
		Rolling mode : <br/>
		<select name="rollingMode">
			<option value="<%=SilverTrace.ROLLING_MODE_MONTH%>" <% if (SilverTrace.ROLLING_MODE_MONTH.equals(appenderRollingType)) out.println("selected=\"selected\""); %>>Every Month</option>
			<option value="<%=SilverTrace.ROLLING_MODE_WEEK%>" <% if (SilverTrace.ROLLING_MODE_WEEK.equals(appenderRollingType)) out.println("selected=\"selected\""); %>>Every Week</option>
			<option value="<%=SilverTrace.ROLLING_MODE_DAILY%>" <% if (SilverTrace.ROLLING_MODE_DAILY.equals(appenderRollingType)) out.println("selected=\"selected\""); %>>Every Day</option>
			<option value="<%=SilverTrace.ROLLING_MODE_HOUR%>" <% if (SilverTrace.ROLLING_MODE_HOUR.equals(appenderRollingType)) out.println("selected=\"selected\""); %>>Every Hour</option>
		</select><br/><br/>
<%	}%>
<%	if (appenderType == SilverTrace.APPENDER_MAIL) { %>
		Mail Host    : <br/><input type="text" name="mailHost" size="60" value="<%=appenderMailHost%>"/><br/>
		Mail From    : <br/><input type="text" name="mailFrom" size="60" value="<%=appenderMailFrom%>"/><br/>
		Mail To      : <br/><input type="text" name="mailTo" size="60" value="<%=appenderMailTo%>"/><br/>
		Mail Subject : <br/><input type="text" name="mailSubject" size="60" value="<%=appenderMailSubject%>"/><br/><br/>
<%	}%>
		<input type="button" value="Add new appender" onclick='javascript:addNewAppender()'/>
	  </td>
    </tr>
  </table>
<br/>
<center><h2 class="intfdcolor3">Users logged</h2></center>
  <table width="800" border="0" cellspacing="0" cellpadding="5">
    <tr>
      <td>NB</td>
      <td>User Id</td>
      <td>Session Id</td>
      <td>Creation Date</td>
    </tr>
<%
    for(int nI=0; nI < m_aUserConnections.length; nI++)
    { %>
        <tr>
          <td><%=nI%></td>
          <td><%=m_aUserConnections[nI].getUserId()%></td>
          <td><%=m_aUserConnections[nI].getSessionId()%></td>
          <td><%=m_Formatter.format(m_aUserConnections[nI].getLogDate())%></td>
        </tr>
<%    }  %>
  </table>
</form>
</center>
</body>
</html>